// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package generated

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :execresult
INSERT INTO players (name)
VALUES (?)
`

func (q *Queries) CreatePlayer(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPlayer, name)
}

const deletePlayer = `-- name: DeletePlayer :execresult
DELETE FROM players
WHERE id = ?
`

func (q *Queries) DeletePlayer(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deletePlayer, id)
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, name, created_at, updated_at
FROM players
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetPlayerByID(ctx context.Context, id string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT id, name, created_at, updated_at
FROM players
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :execresult
UPDATE players
SET name = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePlayerParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePlayer, arg.Name, arg.ID)
}
